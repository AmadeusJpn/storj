// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bandwidth.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AgreementsSummary struct {
}

func (m *AgreementsSummary) Reset()                    { *m = AgreementsSummary{} }
func (m *AgreementsSummary) String() string            { return proto.CompactTextString(m) }
func (*AgreementsSummary) ProtoMessage()               {}
func (*AgreementsSummary) Descriptor() ([]byte, []int) { return fileDescriptorBandwidth, []int{0} }

func init() {
	proto.RegisterType((*AgreementsSummary)(nil), "bandwidth.AgreementsSummary")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Bandwidth service

type BandwidthClient interface {
	BandwidthAgreements(ctx context.Context, opts ...grpc.CallOption) (Bandwidth_BandwidthAgreementsClient, error)
}

type bandwidthClient struct {
	cc *grpc.ClientConn
}

func NewBandwidthClient(cc *grpc.ClientConn) BandwidthClient {
	return &bandwidthClient{cc}
}

func (c *bandwidthClient) BandwidthAgreements(ctx context.Context, opts ...grpc.CallOption) (Bandwidth_BandwidthAgreementsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Bandwidth_serviceDesc.Streams[0], c.cc, "/bandwidth.Bandwidth/BandwidthAgreements", opts...)
	if err != nil {
		return nil, err
	}
	x := &bandwidthBandwidthAgreementsClient{stream}
	return x, nil
}

type Bandwidth_BandwidthAgreementsClient interface {
	Send(*RenterBandwidthAllocation) error
	CloseAndRecv() (*AgreementsSummary, error)
	grpc.ClientStream
}

type bandwidthBandwidthAgreementsClient struct {
	grpc.ClientStream
}

func (x *bandwidthBandwidthAgreementsClient) Send(m *RenterBandwidthAllocation) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bandwidthBandwidthAgreementsClient) CloseAndRecv() (*AgreementsSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AgreementsSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Bandwidth service

type BandwidthServer interface {
	BandwidthAgreements(Bandwidth_BandwidthAgreementsServer) error
}

func RegisterBandwidthServer(s *grpc.Server, srv BandwidthServer) {
	s.RegisterService(&_Bandwidth_serviceDesc, srv)
}

func _Bandwidth_BandwidthAgreements_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BandwidthServer).BandwidthAgreements(&bandwidthBandwidthAgreementsServer{stream})
}

type Bandwidth_BandwidthAgreementsServer interface {
	SendAndClose(*AgreementsSummary) error
	Recv() (*RenterBandwidthAllocation, error)
	grpc.ServerStream
}

type bandwidthBandwidthAgreementsServer struct {
	grpc.ServerStream
}

func (x *bandwidthBandwidthAgreementsServer) SendAndClose(m *AgreementsSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bandwidthBandwidthAgreementsServer) Recv() (*RenterBandwidthAllocation, error) {
	m := new(RenterBandwidthAllocation)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Bandwidth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bandwidth.Bandwidth",
	HandlerType: (*BandwidthServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BandwidthAgreements",
			Handler:       _Bandwidth_BandwidthAgreements_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "bandwidth.proto",
}

func init() { proto.RegisterFile("bandwidth.proto", fileDescriptorBandwidth) }

var fileDescriptorBandwidth = []byte{
	// 154 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0x4a, 0xcc, 0x4b,
	0x29, 0xcf, 0x4c, 0x29, 0xc9, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x48,
	0x71, 0xa5, 0xe7, 0xa7, 0xe7, 0x43, 0x84, 0xa5, 0x04, 0x0a, 0x32, 0x53, 0x93, 0x53, 0x8b, 0x4b,
	0xf2, 0x8b, 0x52, 0x21, 0x22, 0x4a, 0xc2, 0x5c, 0x82, 0x8e, 0xe9, 0x45, 0xa9, 0xa9, 0xb9, 0xa9,
	0x79, 0x25, 0xc5, 0xc1, 0xa5, 0xb9, 0xb9, 0x89, 0x45, 0x95, 0x46, 0x85, 0x5c, 0x9c, 0x4e, 0x30,
	0xfd, 0x42, 0x29, 0x5c, 0xc2, 0x70, 0x0e, 0x42, 0xa9, 0x90, 0xb6, 0x1e, 0xc2, 0xac, 0xa2, 0xfc,
	0xd2, 0x92, 0xd4, 0x62, 0xbd, 0xa0, 0xd4, 0xbc, 0x92, 0xd4, 0x22, 0x84, 0xe2, 0x9c, 0x9c, 0xfc,
	0xe4, 0xc4, 0x92, 0xcc, 0xfc, 0x3c, 0x29, 0x19, 0x3d, 0x84, 0x03, 0x31, 0xac, 0x53, 0x62, 0xd0,
	0x60, 0x74, 0x62, 0x89, 0x62, 0x2a, 0x48, 0x4a, 0x62, 0x03, 0x3b, 0xca, 0x18, 0x10, 0x00, 0x00,
	0xff, 0xff, 0xf5, 0x07, 0x2e, 0x37, 0xd0, 0x00, 0x00, 0x00,
}
