// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pointerdb.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import google_protobuf2 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RedundancyScheme_SchemeType int32

const (
	RedundancyScheme_RS RedundancyScheme_SchemeType = 0
)

var RedundancyScheme_SchemeType_name = map[int32]string{
	0: "RS",
}
var RedundancyScheme_SchemeType_value = map[string]int32{
	"RS": 0,
}

func (x RedundancyScheme_SchemeType) String() string {
	return proto.EnumName(RedundancyScheme_SchemeType_name, int32(x))
}
func (RedundancyScheme_SchemeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPointerdb, []int{0, 0}
}

type Pointer_DataType int32

const (
	Pointer_INLINE Pointer_DataType = 0
	Pointer_REMOTE Pointer_DataType = 1
)

var Pointer_DataType_name = map[int32]string{
	0: "INLINE",
	1: "REMOTE",
}
var Pointer_DataType_value = map[string]int32{
	"INLINE": 0,
	"REMOTE": 1,
}

func (x Pointer_DataType) String() string {
	return proto.EnumName(Pointer_DataType_name, int32(x))
}
func (Pointer_DataType) EnumDescriptor() ([]byte, []int) { return fileDescriptorPointerdb, []int{3, 0} }

type RedundancyScheme struct {
	Type RedundancyScheme_SchemeType `protobuf:"varint,1,opt,name=type,proto3,enum=pointerdb.RedundancyScheme_SchemeType" json:"type,omitempty"`
	// these values apply to RS encoding
	MinReq           int32 `protobuf:"varint,2,opt,name=min_req,json=minReq,proto3" json:"min_req,omitempty"`
	Total            int32 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	RepairThreshold  int32 `protobuf:"varint,4,opt,name=repair_threshold,json=repairThreshold,proto3" json:"repair_threshold,omitempty"`
	SuccessThreshold int32 `protobuf:"varint,5,opt,name=success_threshold,json=successThreshold,proto3" json:"success_threshold,omitempty"`
	ErasureShareSize int32 `protobuf:"varint,6,opt,name=erasure_share_size,json=erasureShareSize,proto3" json:"erasure_share_size,omitempty"`
}

func (m *RedundancyScheme) Reset()                    { *m = RedundancyScheme{} }
func (m *RedundancyScheme) String() string            { return proto.CompactTextString(m) }
func (*RedundancyScheme) ProtoMessage()               {}
func (*RedundancyScheme) Descriptor() ([]byte, []int) { return fileDescriptorPointerdb, []int{0} }

func (m *RedundancyScheme) GetType() RedundancyScheme_SchemeType {
	if m != nil {
		return m.Type
	}
	return RedundancyScheme_RS
}

func (m *RedundancyScheme) GetMinReq() int32 {
	if m != nil {
		return m.MinReq
	}
	return 0
}

func (m *RedundancyScheme) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *RedundancyScheme) GetRepairThreshold() int32 {
	if m != nil {
		return m.RepairThreshold
	}
	return 0
}

func (m *RedundancyScheme) GetSuccessThreshold() int32 {
	if m != nil {
		return m.SuccessThreshold
	}
	return 0
}

func (m *RedundancyScheme) GetErasureShareSize() int32 {
	if m != nil {
		return m.ErasureShareSize
	}
	return 0
}

type RemotePiece struct {
	PieceNum int32  `protobuf:"varint,1,opt,name=piece_num,json=pieceNum,proto3" json:"piece_num,omitempty"`
	NodeId   string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (m *RemotePiece) Reset()                    { *m = RemotePiece{} }
func (m *RemotePiece) String() string            { return proto.CompactTextString(m) }
func (*RemotePiece) ProtoMessage()               {}
func (*RemotePiece) Descriptor() ([]byte, []int) { return fileDescriptorPointerdb, []int{1} }

func (m *RemotePiece) GetPieceNum() int32 {
	if m != nil {
		return m.PieceNum
	}
	return 0
}

func (m *RemotePiece) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

type RemoteSegment struct {
	Redundancy   *RedundancyScheme `protobuf:"bytes,1,opt,name=redundancy" json:"redundancy,omitempty"`
	PieceId      string            `protobuf:"bytes,2,opt,name=piece_id,json=pieceId,proto3" json:"piece_id,omitempty"`
	RemotePieces []*RemotePiece    `protobuf:"bytes,3,rep,name=remote_pieces,json=remotePieces" json:"remote_pieces,omitempty"`
	MerkleRoot   []byte            `protobuf:"bytes,4,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
}

func (m *RemoteSegment) Reset()                    { *m = RemoteSegment{} }
func (m *RemoteSegment) String() string            { return proto.CompactTextString(m) }
func (*RemoteSegment) ProtoMessage()               {}
func (*RemoteSegment) Descriptor() ([]byte, []int) { return fileDescriptorPointerdb, []int{2} }

func (m *RemoteSegment) GetRedundancy() *RedundancyScheme {
	if m != nil {
		return m.Redundancy
	}
	return nil
}

func (m *RemoteSegment) GetPieceId() string {
	if m != nil {
		return m.PieceId
	}
	return ""
}

func (m *RemoteSegment) GetRemotePieces() []*RemotePiece {
	if m != nil {
		return m.RemotePieces
	}
	return nil
}

func (m *RemoteSegment) GetMerkleRoot() []byte {
	if m != nil {
		return m.MerkleRoot
	}
	return nil
}

type Pointer struct {
	Type           Pointer_DataType            `protobuf:"varint,1,opt,name=type,proto3,enum=pointerdb.Pointer_DataType" json:"type,omitempty"`
	InlineSegment  []byte                      `protobuf:"bytes,3,opt,name=inline_segment,json=inlineSegment,proto3" json:"inline_segment,omitempty"`
	Remote         *RemoteSegment              `protobuf:"bytes,4,opt,name=remote" json:"remote,omitempty"`
	Size_          int64                       `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	CreationDate   *google_protobuf2.Timestamp `protobuf:"bytes,6,opt,name=creation_date,json=creationDate" json:"creation_date,omitempty"`
	ExpirationDate *google_protobuf2.Timestamp `protobuf:"bytes,7,opt,name=expiration_date,json=expirationDate" json:"expiration_date,omitempty"`
	Metadata       []byte                      `protobuf:"bytes,8,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *Pointer) Reset()                    { *m = Pointer{} }
func (m *Pointer) String() string            { return proto.CompactTextString(m) }
func (*Pointer) ProtoMessage()               {}
func (*Pointer) Descriptor() ([]byte, []int) { return fileDescriptorPointerdb, []int{3} }

func (m *Pointer) GetType() Pointer_DataType {
	if m != nil {
		return m.Type
	}
	return Pointer_INLINE
}

func (m *Pointer) GetInlineSegment() []byte {
	if m != nil {
		return m.InlineSegment
	}
	return nil
}

func (m *Pointer) GetRemote() *RemoteSegment {
	if m != nil {
		return m.Remote
	}
	return nil
}

func (m *Pointer) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *Pointer) GetCreationDate() *google_protobuf2.Timestamp {
	if m != nil {
		return m.CreationDate
	}
	return nil
}

func (m *Pointer) GetExpirationDate() *google_protobuf2.Timestamp {
	if m != nil {
		return m.ExpirationDate
	}
	return nil
}

func (m *Pointer) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// PutRequest is a request message for the Put rpc call
type PutRequest struct {
	Path    Path     `protobuf:"bytes,1,opt,name=path,proto3,casttype=Path" json:"path,omitempty"`
	Pointer *Pointer `protobuf:"bytes,2,opt,name=pointer" json:"pointer,omitempty"`
}

func (m *PutRequest) Reset()                    { *m = PutRequest{} }
func (m *PutRequest) String() string            { return proto.CompactTextString(m) }
func (*PutRequest) ProtoMessage()               {}
func (*PutRequest) Descriptor() ([]byte, []int) { return fileDescriptorPointerdb, []int{4} }

func (m *PutRequest) GetPath() Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *PutRequest) GetPointer() *Pointer {
	if m != nil {
		return m.Pointer
	}
	return nil
}

// GetRequest is a request message for the Get rpc call
type GetRequest struct {
	Path Path `protobuf:"bytes,1,opt,name=path,proto3,casttype=Path" json:"path,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptorPointerdb, []int{5} }

func (m *GetRequest) GetPath() Path {
	if m != nil {
		return m.Path
	}
	return nil
}

// ListRequest is a request message for the List rpc call
type ListRequest struct {
	Prefix     string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	StartAfter string `protobuf:"bytes,2,opt,name=start_after,json=startAfter,proto3" json:"start_after,omitempty"`
	EndBefore  string `protobuf:"bytes,3,opt,name=end_before,json=endBefore,proto3" json:"end_before,omitempty"`
	Recursive  bool   `protobuf:"varint,4,opt,name=recursive,proto3" json:"recursive,omitempty"`
	Limit      int32  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	MetaFlags  uint32 `protobuf:"fixed32,6,opt,name=meta_flags,json=metaFlags,proto3" json:"meta_flags,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptorPointerdb, []int{6} }

func (m *ListRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *ListRequest) GetStartAfter() string {
	if m != nil {
		return m.StartAfter
	}
	return ""
}

func (m *ListRequest) GetEndBefore() string {
	if m != nil {
		return m.EndBefore
	}
	return ""
}

func (m *ListRequest) GetRecursive() bool {
	if m != nil {
		return m.Recursive
	}
	return false
}

func (m *ListRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListRequest) GetMetaFlags() uint32 {
	if m != nil {
		return m.MetaFlags
	}
	return 0
}

// PutResponse is a response message for the Put rpc call
type PutResponse struct {
}

func (m *PutResponse) Reset()                    { *m = PutResponse{} }
func (m *PutResponse) String() string            { return proto.CompactTextString(m) }
func (*PutResponse) ProtoMessage()               {}
func (*PutResponse) Descriptor() ([]byte, []int) { return fileDescriptorPointerdb, []int{7} }

// GetResponse is a response message for the Get rpc call
type GetResponse struct {
	Pointer       *Pointer                  `protobuf:"bytes,1,opt,name=pointer" json:"pointer,omitempty"`
	Nodes         []*Node                   `protobuf:"bytes,2,rep,name=nodes" json:"nodes,omitempty"`
	Pba           *PayerBandwidthAllocation `protobuf:"bytes,3,opt,name=pba" json:"pba,omitempty"`
	Authorization *SignedMessage            `protobuf:"bytes,4,opt,name=authorization" json:"authorization,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptorPointerdb, []int{8} }

func (m *GetResponse) GetPointer() *Pointer {
	if m != nil {
		return m.Pointer
	}
	return nil
}

func (m *GetResponse) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *GetResponse) GetPba() *PayerBandwidthAllocation {
	if m != nil {
		return m.Pba
	}
	return nil
}

func (m *GetResponse) GetAuthorization() *SignedMessage {
	if m != nil {
		return m.Authorization
	}
	return nil
}

// ListResponse is a response message for the List rpc call
type ListResponse struct {
	Items []*ListResponse_Item `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	More  bool                 `protobuf:"varint,2,opt,name=more,proto3" json:"more,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptorPointerdb, []int{9} }

func (m *ListResponse) GetItems() []*ListResponse_Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListResponse) GetMore() bool {
	if m != nil {
		return m.More
	}
	return false
}

type ListResponse_Item struct {
	Path     string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Pointer  *Pointer `protobuf:"bytes,2,opt,name=pointer" json:"pointer,omitempty"`
	IsPrefix bool     `protobuf:"varint,3,opt,name=is_prefix,json=isPrefix,proto3" json:"is_prefix,omitempty"`
}

func (m *ListResponse_Item) Reset()                    { *m = ListResponse_Item{} }
func (m *ListResponse_Item) String() string            { return proto.CompactTextString(m) }
func (*ListResponse_Item) ProtoMessage()               {}
func (*ListResponse_Item) Descriptor() ([]byte, []int) { return fileDescriptorPointerdb, []int{9, 0} }

func (m *ListResponse_Item) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ListResponse_Item) GetPointer() *Pointer {
	if m != nil {
		return m.Pointer
	}
	return nil
}

func (m *ListResponse_Item) GetIsPrefix() bool {
	if m != nil {
		return m.IsPrefix
	}
	return false
}

type DeleteRequest struct {
	Path Path `protobuf:"bytes,1,opt,name=path,proto3,casttype=Path" json:"path,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorPointerdb, []int{10} }

func (m *DeleteRequest) GetPath() Path {
	if m != nil {
		return m.Path
	}
	return nil
}

// DeleteResponse is a response message for the Delete rpc call
type DeleteResponse struct {
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptorPointerdb, []int{11} }

// IterateRequest is a request message for the Iterate rpc call
type IterateRequest struct {
	Prefix  string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	First   string `protobuf:"bytes,2,opt,name=first,proto3" json:"first,omitempty"`
	Recurse bool   `protobuf:"varint,3,opt,name=recurse,proto3" json:"recurse,omitempty"`
	Reverse bool   `protobuf:"varint,4,opt,name=reverse,proto3" json:"reverse,omitempty"`
}

func (m *IterateRequest) Reset()                    { *m = IterateRequest{} }
func (m *IterateRequest) String() string            { return proto.CompactTextString(m) }
func (*IterateRequest) ProtoMessage()               {}
func (*IterateRequest) Descriptor() ([]byte, []int) { return fileDescriptorPointerdb, []int{12} }

func (m *IterateRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *IterateRequest) GetFirst() string {
	if m != nil {
		return m.First
	}
	return ""
}

func (m *IterateRequest) GetRecurse() bool {
	if m != nil {
		return m.Recurse
	}
	return false
}

func (m *IterateRequest) GetReverse() bool {
	if m != nil {
		return m.Reverse
	}
	return false
}

func init() {
	proto.RegisterType((*RedundancyScheme)(nil), "pointerdb.RedundancyScheme")
	proto.RegisterType((*RemotePiece)(nil), "pointerdb.RemotePiece")
	proto.RegisterType((*RemoteSegment)(nil), "pointerdb.RemoteSegment")
	proto.RegisterType((*Pointer)(nil), "pointerdb.Pointer")
	proto.RegisterType((*PutRequest)(nil), "pointerdb.PutRequest")
	proto.RegisterType((*GetRequest)(nil), "pointerdb.GetRequest")
	proto.RegisterType((*ListRequest)(nil), "pointerdb.ListRequest")
	proto.RegisterType((*PutResponse)(nil), "pointerdb.PutResponse")
	proto.RegisterType((*GetResponse)(nil), "pointerdb.GetResponse")
	proto.RegisterType((*ListResponse)(nil), "pointerdb.ListResponse")
	proto.RegisterType((*ListResponse_Item)(nil), "pointerdb.ListResponse.Item")
	proto.RegisterType((*DeleteRequest)(nil), "pointerdb.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "pointerdb.DeleteResponse")
	proto.RegisterType((*IterateRequest)(nil), "pointerdb.IterateRequest")
	proto.RegisterEnum("pointerdb.RedundancyScheme_SchemeType", RedundancyScheme_SchemeType_name, RedundancyScheme_SchemeType_value)
	proto.RegisterEnum("pointerdb.Pointer_DataType", Pointer_DataType_name, Pointer_DataType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PointerDB service

type PointerDBClient interface {
	// Put formats and hands off a file path to be saved to boltdb
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	// Get formats and hands off a file path to get a small value from boltdb
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// List calls the bolt client's List function and returns all file paths
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Delete formats and hands off a file path to delete from boltdb
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type pointerDBClient struct {
	cc *grpc.ClientConn
}

func NewPointerDBClient(cc *grpc.ClientConn) PointerDBClient {
	return &pointerDBClient{cc}
}

func (c *pointerDBClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := grpc.Invoke(ctx, "/pointerdb.PointerDB/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointerDBClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/pointerdb.PointerDB/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointerDBClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/pointerdb.PointerDB/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointerDBClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/pointerdb.PointerDB/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PointerDB service

type PointerDBServer interface {
	// Put formats and hands off a file path to be saved to boltdb
	Put(context.Context, *PutRequest) (*PutResponse, error)
	// Get formats and hands off a file path to get a small value from boltdb
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// List calls the bolt client's List function and returns all file paths
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Delete formats and hands off a file path to delete from boltdb
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
}

func RegisterPointerDBServer(s *grpc.Server, srv PointerDBServer) {
	s.RegisterService(&_PointerDB_serviceDesc, srv)
}

func _PointerDB_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointerDBServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pointerdb.PointerDB/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointerDBServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointerDB_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointerDBServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pointerdb.PointerDB/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointerDBServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointerDB_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointerDBServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pointerdb.PointerDB/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointerDBServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointerDB_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointerDBServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pointerdb.PointerDB/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointerDBServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PointerDB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pointerdb.PointerDB",
	HandlerType: (*PointerDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _PointerDB_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PointerDB_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PointerDB_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PointerDB_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pointerdb.proto",
}

func init() { proto.RegisterFile("pointerdb.proto", fileDescriptorPointerdb) }

var fileDescriptorPointerdb = []byte{
	// 1030 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xdf, 0x6f, 0x1b, 0xc5,
	0x13, 0xaf, 0x7f, 0xdb, 0x63, 0x3b, 0xf5, 0x77, 0x95, 0x6f, 0xea, 0xba, 0x41, 0x89, 0x0e, 0x81,
	0x42, 0x29, 0x0e, 0x32, 0x95, 0x90, 0x28, 0x08, 0x35, 0x4d, 0xa8, 0x2c, 0xb5, 0xc1, 0x5a, 0xe7,
	0x01, 0xf1, 0x72, 0x5a, 0xfb, 0xc6, 0xf6, 0x8a, 0xbb, 0xdb, 0xcb, 0xee, 0x5e, 0x68, 0xf2, 0x9f,
	0xf0, 0x9f, 0xf0, 0xc2, 0x23, 0xff, 0x06, 0x6f, 0x3c, 0x22, 0xde, 0x79, 0x42, 0xbb, 0x7b, 0x67,
	0x9f, 0x1b, 0x4a, 0x2b, 0x5e, 0xec, 0x9b, 0xcf, 0x7c, 0x66, 0x76, 0xe7, 0x33, 0x33, 0x0b, 0x77,
	0x13, 0xc1, 0x63, 0x8d, 0x32, 0x98, 0x0d, 0x13, 0x29, 0xb4, 0x20, 0xad, 0x35, 0x30, 0x80, 0xa5,
	0x58, 0x0a, 0x07, 0x0f, 0x0e, 0x96, 0x42, 0x2c, 0x43, 0x3c, 0xb6, 0xd6, 0x2c, 0x5d, 0x1c, 0x6b,
	0x1e, 0xa1, 0xd2, 0x2c, 0x4a, 0x32, 0x42, 0x57, 0x5c, 0xa1, 0x0c, 0xd9, 0x75, 0x66, 0xf6, 0x12,
	0x8e, 0x73, 0x54, 0x5a, 0x48, 0x74, 0x88, 0xf7, 0x53, 0x19, 0x7a, 0x14, 0x83, 0x34, 0x0e, 0x58,
	0x3c, 0xbf, 0x9e, 0xce, 0x57, 0x18, 0x21, 0xf9, 0x02, 0xaa, 0xfa, 0x3a, 0xc1, 0x7e, 0xe9, 0xb0,
	0x74, 0xb4, 0x33, 0xfa, 0x70, 0xb8, 0xb9, 0xcd, 0xeb, 0xd4, 0xa1, 0xfb, 0xbb, 0xb8, 0x4e, 0x90,
	0xda, 0x18, 0x72, 0x0f, 0x1a, 0x11, 0x8f, 0x7d, 0x89, 0x97, 0xfd, 0xf2, 0x61, 0xe9, 0xa8, 0x46,
	0xeb, 0x11, 0x8f, 0x29, 0x5e, 0x92, 0x5d, 0xa8, 0x69, 0xa1, 0x59, 0xd8, 0xaf, 0x58, 0xd8, 0x19,
	0xe4, 0x23, 0xe8, 0x49, 0x4c, 0x18, 0x97, 0xbe, 0x5e, 0x49, 0x54, 0x2b, 0x11, 0x06, 0xfd, 0xaa,
	0x25, 0xdc, 0x75, 0xf8, 0x45, 0x0e, 0x93, 0x8f, 0xe1, 0x7f, 0x2a, 0x9d, 0xcf, 0x51, 0xa9, 0x02,
	0xb7, 0x66, 0xb9, 0xbd, 0xcc, 0xb1, 0x21, 0x3f, 0x02, 0x82, 0x92, 0xa9, 0x54, 0xa2, 0xaf, 0x56,
	0xcc, 0xfc, 0xf2, 0x1b, 0xec, 0xd7, 0x1d, 0x3b, 0xf3, 0x4c, 0x8d, 0x63, 0xca, 0x6f, 0xd0, 0xdb,
	0x05, 0xd8, 0x14, 0x42, 0xea, 0x50, 0xa6, 0xd3, 0xde, 0x1d, 0xef, 0x19, 0xb4, 0x29, 0x46, 0x42,
	0xe3, 0xc4, 0xa8, 0x46, 0x1e, 0x40, 0xcb, 0xca, 0xe7, 0xc7, 0x69, 0x64, 0xa5, 0xa9, 0xd1, 0xa6,
	0x05, 0xce, 0xd3, 0xc8, 0x94, 0x1d, 0x8b, 0x00, 0x7d, 0x1e, 0xd8, 0xb2, 0x5b, 0xb4, 0x6e, 0xcc,
	0x71, 0xe0, 0xfd, 0x5a, 0x82, 0xae, 0xcb, 0x32, 0xc5, 0x65, 0x84, 0xb1, 0x26, 0x4f, 0x00, 0xe4,
	0x5a, 0x46, 0x9b, 0xa8, 0x3d, 0x7a, 0xf0, 0x2f, 0x1a, 0xd3, 0x02, 0x9d, 0xdc, 0x07, 0x77, 0xe6,
	0xe6, 0xa0, 0x86, 0xb5, 0xc7, 0x01, 0x79, 0x02, 0x5d, 0x69, 0x0f, 0xf2, 0x5d, 0x97, 0xfb, 0x95,
	0xc3, 0xca, 0x51, 0x7b, 0xb4, 0xb7, 0x95, 0x7a, 0x5d, 0x0e, 0xed, 0xc8, 0x8d, 0xa1, 0xc8, 0x01,
	0xb4, 0x23, 0x94, 0x3f, 0x84, 0xe8, 0x4b, 0x21, 0xb4, 0x6d, 0x41, 0x87, 0x82, 0x83, 0xa8, 0x10,
	0xda, 0xfb, 0xa3, 0x0c, 0x8d, 0x89, 0x4b, 0x44, 0x8e, 0xb7, 0xe6, 0xa3, 0x78, 0xf7, 0x8c, 0x31,
	0x3c, 0x65, 0x9a, 0x15, 0x86, 0xe2, 0x03, 0xd8, 0xe1, 0x71, 0xc8, 0x63, 0xf4, 0x95, 0x13, 0xc1,
	0x0e, 0x41, 0x87, 0x76, 0x1d, 0x9a, 0x2b, 0xf3, 0x29, 0xd4, 0xdd, 0xa5, 0xec, 0xf9, 0xed, 0x51,
	0xff, 0xd6, 0xd5, 0x33, 0x26, 0xcd, 0x78, 0x84, 0x40, 0xd5, 0x36, 0xd6, 0x8c, 0x41, 0x85, 0xda,
	0x6f, 0xf2, 0x35, 0x74, 0xe7, 0x12, 0x99, 0xe6, 0x22, 0xf6, 0x03, 0xa6, 0x5d, 0xd7, 0xdb, 0xa3,
	0xc1, 0xd0, 0x2d, 0xcb, 0x30, 0x5f, 0x96, 0xe1, 0x45, 0xbe, 0x2c, 0xb4, 0x93, 0x07, 0x9c, 0x32,
	0x8d, 0xe4, 0x19, 0xdc, 0xc5, 0x57, 0x09, 0x97, 0x85, 0x14, 0x8d, 0xb7, 0xa6, 0xd8, 0xd9, 0x84,
	0xd8, 0x24, 0x03, 0x68, 0x46, 0xa8, 0x59, 0xc0, 0x34, 0xeb, 0x37, 0x6d, 0xb1, 0x6b, 0xdb, 0xf3,
	0xa0, 0x99, 0x0b, 0x44, 0x00, 0xea, 0xe3, 0xf3, 0x17, 0xe3, 0xf3, 0xb3, 0xde, 0x1d, 0xf3, 0x4d,
	0xcf, 0x5e, 0x7e, 0x7b, 0x71, 0xd6, 0x2b, 0x79, 0xdf, 0x01, 0x4c, 0x52, 0x4d, 0xf1, 0x32, 0x45,
	0xa5, 0xc9, 0x3e, 0x54, 0x13, 0xa6, 0x57, 0x56, 0xf1, 0xce, 0x49, 0xf3, 0xaf, 0xdf, 0x0e, 0xaa,
	0x13, 0xa6, 0x57, 0xd4, 0xa2, 0xe4, 0x11, 0x34, 0x32, 0xa1, 0xec, 0x4c, 0xb4, 0x47, 0xe4, 0x76,
	0x4b, 0x68, 0x4e, 0xf1, 0x1e, 0x02, 0x3c, 0xc7, 0x77, 0xcb, 0xec, 0xfd, 0x5c, 0x82, 0xf6, 0x0b,
	0xae, 0xd6, 0xec, 0x3d, 0xa8, 0x27, 0x12, 0x17, 0xfc, 0x95, 0xe5, 0xb7, 0x68, 0x66, 0x99, 0xf1,
	0x51, 0x9a, 0x49, 0xed, 0xb3, 0x45, 0x7e, 0x8b, 0x16, 0x05, 0x0b, 0x3d, 0x35, 0x08, 0x79, 0x0f,
	0x00, 0xe3, 0xc0, 0x9f, 0xe1, 0x42, 0x48, 0xb4, 0xdd, 0x6f, 0xd1, 0x16, 0xc6, 0xc1, 0x89, 0x05,
	0xc8, 0x3e, 0xb4, 0x24, 0xce, 0x53, 0xa9, 0xf8, 0x95, 0x6b, 0x7e, 0x93, 0x6e, 0x00, 0xf3, 0x74,
	0x84, 0x3c, 0xe2, 0x3a, 0xdb, 0x76, 0x67, 0x98, 0x94, 0x46, 0x51, 0x7f, 0x11, 0xb2, 0xa5, 0xb2,
	0x4d, 0x6e, 0xd0, 0x96, 0x41, 0xbe, 0x31, 0x80, 0xd7, 0x85, 0xb6, 0x15, 0x50, 0x25, 0x22, 0x56,
	0xe8, 0xfd, 0x5e, 0x82, 0xb6, 0x2d, 0xdb, 0xd9, 0x45, 0xcd, 0x4a, 0x6f, 0xd5, 0x8c, 0xbc, 0x0f,
	0x35, 0xb3, 0xcf, 0xaa, 0x5f, 0xb6, 0x3b, 0xd5, 0x1d, 0xe6, 0xef, 0xea, 0xb9, 0x08, 0x90, 0x3a,
	0x1f, 0xf9, 0x12, 0x2a, 0xc9, 0x8c, 0xd9, 0xe2, 0xda, 0xa3, 0x87, 0xc3, 0xcd, 0x5b, 0x2b, 0x45,
	0xaa, 0x51, 0x0d, 0x27, 0xec, 0x1a, 0xe5, 0x09, 0x8b, 0x83, 0x1f, 0x79, 0xa0, 0x57, 0x4f, 0xc3,
	0x50, 0xcc, 0xed, 0xbc, 0x50, 0x13, 0x46, 0xce, 0xa0, 0xcb, 0x52, 0xbd, 0x12, 0x92, 0xdf, 0x58,
	0x34, 0xdb, 0x81, 0x83, 0xdb, 0x79, 0xa6, 0x7c, 0x19, 0x63, 0xf0, 0x12, 0x95, 0x62, 0x4b, 0xa4,
	0xdb, 0x51, 0xde, 0x2f, 0x25, 0xe8, 0xb8, 0x8e, 0x65, 0x85, 0x8e, 0xa0, 0xc6, 0x35, 0x46, 0xaa,
	0x5f, 0xb2, 0x57, 0xdf, 0x2f, 0x94, 0x59, 0xe4, 0x0d, 0xc7, 0x1a, 0x23, 0xea, 0xa8, 0x66, 0xad,
	0x22, 0xd3, 0xa7, 0xb2, 0xed, 0x84, 0xfd, 0x1e, 0x20, 0x54, 0x0d, 0xc5, 0xf8, 0xd6, 0x03, 0xd3,
	0xfa, 0x2f, 0x03, 0x68, 0x1e, 0x52, 0xae, 0xfc, 0x6c, 0x8e, 0x2a, 0xf6, 0x88, 0x26, 0x57, 0x13,
	0x6b, 0x7b, 0x9f, 0x40, 0xf7, 0x14, 0x43, 0xd4, 0xf8, 0x6e, 0x03, 0xda, 0x83, 0x9d, 0x9c, 0x9e,
	0x35, 0x5a, 0xc2, 0xce, 0x58, 0xa3, 0x64, 0x9b, 0x0c, 0x6f, 0x1a, 0xda, 0x5d, 0xa8, 0x2d, 0xb8,
	0x54, 0x3a, 0x1b, 0x57, 0x67, 0x90, 0x3e, 0x34, 0xdc, 0xe4, 0x61, 0x76, 0xb7, 0xdc, 0x74, 0x9e,
	0x2b, 0x34, 0x9e, 0x6a, 0xee, 0xb1, 0xe6, 0xe8, 0xcf, 0x12, 0xb4, 0xb2, 0x32, 0x4f, 0x4f, 0xc8,
	0x63, 0xa8, 0x4c, 0x52, 0x4d, 0xfe, 0x5f, 0xd4, 0x60, 0xbd, 0xca, 0x83, 0xbd, 0xd7, 0xe1, 0xac,
	0x4f, 0x8f, 0xa1, 0xf2, 0x1c, 0xb7, 0xa3, 0x36, 0x6b, 0xba, 0x15, 0x55, 0x1c, 0xe3, 0xcf, 0xa1,
	0x6a, 0xba, 0x48, 0xf6, 0x6e, 0xb5, 0xd5, 0xc5, 0xdd, 0x7b, 0x43, 0xbb, 0xc9, 0x57, 0x50, 0x77,
	0xc2, 0x91, 0xe2, 0x2b, 0xbb, 0x25, 0xfd, 0xe0, 0xfe, 0x3f, 0x78, 0x5c, 0xf8, 0x49, 0xf5, 0xfb,
	0x72, 0x32, 0x9b, 0xd5, 0xed, 0x43, 0xf8, 0xd9, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x5e,
	0x3d, 0x8a, 0xb0, 0x08, 0x00, 0x00,
}
