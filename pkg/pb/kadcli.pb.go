// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kadcli.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CountNodesResponse struct {
	Kademlia int64 `protobuf:"varint,1,opt,name=kademlia,proto3" json:"kademlia,omitempty"`
	Overlay  int64 `protobuf:"varint,2,opt,name=overlay,proto3" json:"overlay,omitempty"`
}

func (m *CountNodesResponse) Reset()                    { *m = CountNodesResponse{} }
func (m *CountNodesResponse) String() string            { return proto.CompactTextString(m) }
func (*CountNodesResponse) ProtoMessage()               {}
func (*CountNodesResponse) Descriptor() ([]byte, []int) { return fileDescriptorKadcli, []int{0} }

func (m *CountNodesResponse) GetKademlia() int64 {
	if m != nil {
		return m.Kademlia
	}
	return 0
}

func (m *CountNodesResponse) GetOverlay() int64 {
	if m != nil {
		return m.Overlay
	}
	return 0
}

type CountNodesRequest struct {
}

func (m *CountNodesRequest) Reset()                    { *m = CountNodesRequest{} }
func (m *CountNodesRequest) String() string            { return proto.CompactTextString(m) }
func (*CountNodesRequest) ProtoMessage()               {}
func (*CountNodesRequest) Descriptor() ([]byte, []int) { return fileDescriptorKadcli, []int{1} }

func init() {
	proto.RegisterType((*CountNodesResponse)(nil), "kadcli.CountNodesResponse")
	proto.RegisterType((*CountNodesRequest)(nil), "kadcli.CountNodesRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for KadCli service

type KadCliClient interface {
	// CountNodes returns the number of nodes in the cache and in the routing table
	CountNodes(ctx context.Context, in *CountNodesRequest, opts ...grpc.CallOption) (*CountNodesResponse, error)
}

type kadCliClient struct {
	cc *grpc.ClientConn
}

func NewKadCliClient(cc *grpc.ClientConn) KadCliClient {
	return &kadCliClient{cc}
}

func (c *kadCliClient) CountNodes(ctx context.Context, in *CountNodesRequest, opts ...grpc.CallOption) (*CountNodesResponse, error) {
	out := new(CountNodesResponse)
	err := grpc.Invoke(ctx, "/kadcli.KadCli/CountNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KadCli service

type KadCliServer interface {
	// CountNodes returns the number of nodes in the cache and in the routing table
	CountNodes(context.Context, *CountNodesRequest) (*CountNodesResponse, error)
}

func RegisterKadCliServer(s *grpc.Server, srv KadCliServer) {
	s.RegisterService(&_KadCli_serviceDesc, srv)
}

func _KadCli_CountNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KadCliServer).CountNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kadcli.KadCli/CountNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KadCliServer).CountNodes(ctx, req.(*CountNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KadCli_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kadcli.KadCli",
	HandlerType: (*KadCliServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountNodes",
			Handler:    _KadCli_CountNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kadcli.proto",
}

func init() { proto.RegisterFile("kadcli.proto", fileDescriptorKadcli) }

var fileDescriptorKadcli = []byte{
	// 161 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0x4e, 0x4c, 0x49,
	0xce, 0xc9, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0xa4, 0xb8, 0xd2, 0xf3,
	0xd3, 0xf3, 0x21, 0x62, 0x4a, 0x5e, 0x5c, 0x42, 0xce, 0xf9, 0xa5, 0x79, 0x25, 0x7e, 0xf9, 0x29,
	0xa9, 0xc5, 0x41, 0xa9, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x52, 0x5c, 0x1c, 0xd9, 0x89,
	0x29, 0xa9, 0xb9, 0x39, 0x99, 0x89, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xcc, 0x41, 0x70, 0xbe, 0x90,
	0x04, 0x17, 0x7b, 0x7e, 0x59, 0x6a, 0x51, 0x4e, 0x62, 0xa5, 0x04, 0x13, 0x58, 0x0a, 0xc6, 0x55,
	0x12, 0xe6, 0x12, 0x44, 0x36, 0xab, 0xb0, 0x34, 0xb5, 0xb8, 0xc4, 0xc8, 0x97, 0x8b, 0xcd, 0x3b,
	0x31, 0xc5, 0x39, 0x27, 0x53, 0xc8, 0x99, 0x8b, 0x0b, 0x21, 0x2d, 0x24, 0xa9, 0x07, 0x75, 0x1b,
	0x86, 0x16, 0x29, 0x29, 0x6c, 0x52, 0x10, 0x97, 0x39, 0xb1, 0x44, 0x31, 0x15, 0x24, 0x25, 0xb1,
	0x81, 0x1d, 0x6f, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x6f, 0x0c, 0x90, 0xe0, 0x00, 0x00,
	0x00,
}
